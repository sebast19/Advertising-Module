<?php

/**
 * @file
 * Contains advertising.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\block\Entity\Block;
use Drupal\advertising\Form\AdvertisingEntityForm;

/**
 * Implements hook_help().
 */
function advertising_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the advertising module.
    case 'help.page.advertising':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a advertising configuration entity') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_form_id_alter().
 */
function advertising_form_taxonomy_vocabulary_confirm_delete_alter(&$form, &$form_state, $form_id) {
  $connection = \Drupal::database();

  $query = $connection->query("SELECT * FROM config  WHERE name LIKE '%advertising.advertising_entity.%'");

  $result = $query->fetchAll();

  $serializer = \Drupal::service('serialization.phpserialize');

  foreach ($result as $key => $entity) {
    $data[] = $serializer->decode($entity->data);

      if($form['#cache']['tags'][0] == 'config:taxonomy.vocabulary.' .$data[$key]['place']) {

        unset($form['entity_deletes']);
        unset($form['entity_updates']);
        $form['actions']['submit']['#disabled'] = TRUE;
        $form['description']['#markup'] = '<strong>You Can\'t <em>Delete</em> this vocabulary because it\'s in use.</strong>';

      }
    }

  }

  /**
   *  Implements hook_preprocess_html()
   */
  function advertising_preprocess_html(&$variables) {

    $variables['#attached']['library'][] = 'advertising/advertising-library';

    $result = \Drupal::service('database')
      ->query(
        'SELECT data FROM `config` WHERE name LIKE :name ', [':name' => "advertising.advertising_entity.%"]
      );

    $data_serilized = [];
    $data_breakpoints = [];
    $i = 0;

    if(!empty($result)) {

      while($data = $result->fetchAssoc()) {

        $data_serilized[] = \Drupal::service('serialization.phpserialize')->decode($data['data']);
        $data_breakpoints[] = \Drupal::service('serialization.phpserialize')->decode($data_serilized[$i]['breakpoints']);
        $i++;
      }

      $variables['#attached']['drupalSettings']['advertising']['advertisingJS']['data_entity'] = $data_serilized;
      $variables['#attached']['drupalSettings']['advertising']['advertisingJS']['data_breakpoints'] = $data_breakpoints;

    } else {

      $variables['#attached']['drupalSettings']['advertising']['advertisingJS']['data_entity'] = '';
      $variables['#attached']['drupalSettings']['advertising']['advertisingJS']['data_breakpoints'] = '';

    }

    // $result2 = \Drupal::service('database')
    //   ->query(
    //     'SELECT data FROM `config` WHERE name LIKE :name ', [':name' => "advertising.advertising_entity.%"]
    //   )->fetchAssoc();
    //
		// $data_serilized2[] = \Drupal::service('serialization.phpserialize')->decode($result2['data']);
		// $places = [];
    //
		// foreach ($data_serilized2 as $blocks) {
    //
		// 	if (array_key_exists($blocks['place'], AdvertisingEntityForm::taxonomy_vocabulary_get_names())) {
		// 		$terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadTree($blocks['place']);
    //     foreach ($terms as $term) {
    //       $places[] = "//taxonomy/term//" . $term->tid;
    //     }
		// 	}
    //
		// 	if (array_key_exists($blocks['place'], AdvertisingEntityForm::content_type_get_names())) {
    //     $entities = \Drupal::service('entity_type.manager')->getStorage('node')->loadByProperties(['type' => $blocks['place']]);
    //     foreach ($entities as $entity) {
    //       $places[] = "//node//" . $entity->id();
    //     }
		// 	}
    //
    //
		// 	$ids[] = \Drupal::entityQuery('block')
		// 		->condition('plugin', 'advertising_block:' . $blocks['id_ad'])
		// 		->execute();
    //
		// 	foreach ($ids[0] as $id) {
		// 		$ids_blocks[] = $id;
		// 	}
    //
		// 	for ($i = 0; $i < count($ids_blocks); $i++) {
		// 		$block = \Drupal\block\Entity\Block::load($ids_blocks[$i]);
    //     $block->setRegion('sidebar_first');
		// 		$visibility = $block->getVisibility();
    //
		// 		if (isset($visibility['request_path']['pages'])) {
    //       for($i = 0; $i < count($places); $i++) {
    //         unset($visibility['request_path']['pages']);
    //         $visibility['request_path']['negate'] = 0;
    //
    //         $visibility['request_path']['pages'] = $places[$i];
    //         $block->setVisibilityConfig('request_path', $visibility['request_path']);
    //         $block->save();
    //       }
		// 		}
		// 	}
    //
    // }
    //
    // $block = Block::load('blockvim001');
    // $block->setRegion('sidebar_first');
    //
    // $visibility = $block->getVisibility();
    //
    // if (isset($visibility['request_path']['pages']))
    // {
    //    unset($visibility['request_path']['pages']);
    //    $visibility['request_path']['negate'] = 0;
    //    $visibility['request_path']['pages'] = '/production/simpsons';
    //    $block->setVisibilityConfig('request_path', $visibility['request_path']);
    //    $block->save();
    // }

  }
